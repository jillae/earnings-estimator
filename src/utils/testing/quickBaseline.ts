/**
 * SNABB BASELINE-TEST
 * 
 * En f√∂rkortad version av baseline-systemet f√∂r snabb verifiering
 */

import { CalculationEngine, CalculationInputs } from '../core/CalculationEngine';
import { machineData } from '@/data/machines';

export async function runQuickBaseline() {
  console.log('üöÄ === SNABB BASELINE-TEST STARTAR ===');
  
  const startTime = Date.now();
  
  // Testa de viktigaste scenarierna
  const quickTests: Array<{ name: string; inputs: CalculationInputs }> = [
    // Emerald - Grundleasing - Standard
    {
      name: 'Emerald_Standard_Grundleasing',
      inputs: {
        machine: machineData.find(m => m.id === 'emerald')!,
        treatmentsPerDay: 4,
        customerPrice: 2500,
        paymentOption: 'leasing',
        selectedLeasingPeriodId: '60',
        selectedInsuranceId: 'no',
        selectedSlaLevel: 'Brons',
        selectedDriftpaket: 'Bas',
        leaseAdjustmentFactor: 0.5,
        useFlatrateOption: 'perCredit',
        currentSliderStep: 1,
        selectedLeasingModel: 'grundleasing',
        workDaysPerMonth: 22
      }
    },
    
    // Emerald - Strategisk
    {
      name: 'Emerald_Strategisk',
      inputs: {
        machine: machineData.find(m => m.id === 'emerald')!,
        treatmentsPerDay: 4,
        customerPrice: 2500,
        paymentOption: 'leasing',
        selectedLeasingPeriodId: '60',
        selectedInsuranceId: 'no',
        selectedSlaLevel: 'Guld',
        selectedDriftpaket: 'Guld',
        leaseAdjustmentFactor: 0.5,
        useFlatrateOption: 'flatrate',
        currentSliderStep: 1,
        selectedLeasingModel: 'strategisk',
        workDaysPerMonth: 22
      }
    },
    
    // Test med f√∂rs√§kring och annan leasingperiod
    {
      name: 'Emerald_36m_F√∂rs√§kring',
      inputs: {
        machine: machineData.find(m => m.id === 'emerald')!,
        treatmentsPerDay: 6,
        customerPrice: 2500,
        paymentOption: 'leasing',
        selectedLeasingPeriodId: '36',
        selectedInsuranceId: 'yes',
        selectedSlaLevel: 'Silver',
        selectedDriftpaket: 'Silver',
        leaseAdjustmentFactor: 0.5,
        useFlatrateOption: 'flatrate',
        currentSliderStep: 1,
        selectedLeasingModel: 'grundleasing',
        workDaysPerMonth: 22
      }
    },
    
    // Kontantbetalning
    {
      name: 'Emerald_Kontant',
      inputs: {
        machine: machineData.find(m => m.id === 'emerald')!,
        treatmentsPerDay: 4,
        customerPrice: 2500,
        paymentOption: 'cash',
        selectedLeasingPeriodId: '60',
        selectedInsuranceId: 'no',
        selectedSlaLevel: 'Brons',
        selectedDriftpaket: 'Bas',
        leaseAdjustmentFactor: 0.5,
        useFlatrateOption: 'perCredit',
        currentSliderStep: 1,
        selectedLeasingModel: 'grundleasing',
        workDaysPerMonth: 22
      }
    }
  ];
  
  console.log(`\nüìã K√∂r ${quickTests.length} snabbtester...`);
  
  const results = [];
  let successCount = 0;
  
  for (const test of quickTests) {
    try {
      console.log(`\nüîß Testar: ${test.name}`);
      
      const result = await CalculationEngine.calculate(test.inputs);
      
      const success = result.isValid && result.errors.length === 0;
      
      console.log(`   ${success ? '‚úÖ' : '‚ùå'} ${test.name}`);
      console.log(`   Leasing: ${result.leasingCost} SEK/m√•n`);
      console.log(`   Credit: ${result.creditPrice} SEK`);
      console.log(`   Netto/m√•n: ${result.netResults.netPerMonthExVat} SEK`);
      console.log(`   Netto/√•r: ${result.netResults.netPerYearExVat} SEK`);
      
      if (!success) {
        console.log(`   Fel: ${result.errors.join(', ')}`);
      }
      
      if (success) successCount++;
      
      results.push({
        testName: test.name,
        success,
        result,
        inputs: test.inputs
      });
      
    } catch (error) {
      console.log(`   ‚ùå KRITISKT FEL: ${error}`);
      results.push({
        testName: test.name,
        success: false,
        error: String(error),
        inputs: test.inputs
      });
    }
  }
  
  const endTime = Date.now();
  const duration = endTime - startTime;
  const successRate = (successCount / quickTests.length) * 100;
  
  console.log(`\nüéØ === SNABB BASELINE RESULTAT ===`);
  console.log(`‚è±Ô∏è  Tid: ${duration}ms`);
  console.log(`üìä Totalt: ${quickTests.length} tester`);
  console.log(`‚úÖ Lyckade: ${successCount}`);
  console.log(`‚ùå Misslyckade: ${quickTests.length - successCount}`);
  console.log(`üìà Framg√•ngsgrad: ${successRate.toFixed(1)}%`);
  
  if (successRate >= 100) {
    console.log(`\nüéâ PERFEKT! Alla snabbtester lyckades - systemet √§r redo f√∂r omfattande baseline.`);
  } else if (successRate >= 75) {
    console.log(`\n‚ö†Ô∏è  Mestadels bra, men n√•gra problem uppt√§cktes. Granska felen innan omfattande baseline.`);
  } else {
    console.log(`\nüö® VARNING: L√•g framg√•ngsgrad! √Ötg√§rda problem innan omfattande baseline k√∂rs.`);
  }
  
  return {
    duration,
    totalTests: quickTests.length,
    successful: successCount,
    failed: quickTests.length - successCount,
    successRate,
    results
  };
}